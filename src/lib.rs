
mod rc5;
mod utils;
mod word;

use crate::rc5::RC5;

/// Returns a cipher text for a given key and plaintext
fn encode_rc5(word_size_in_bits: usize, num_rounds:u32, key_size:usize, key: Vec<u8>, plaintext: &[u8]) -> Vec<u8> {
	let rc5 = RC5::new(word_size_in_bits, num_rounds, key_size);
	rc5.encrypt(&key, &plaintext)
}

/// Returns a plaintext for a given key and ciphertext
fn decode_rc5(word_size_in_bits: usize, num_rounds:u32, key_size:usize, key: Vec<u8>, ciphertext: &[u8]) -> Vec<u8> {
	let rc5 = RC5::new(word_size_in_bits, num_rounds, key_size);
	rc5.decrypt(&key,&ciphertext)
}

#[cfg(test)]
mod rc5_32_12_16_tests {
	use super::*;

	#[test]
    fn encode_decode() {
    	let key = vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F];
    	let pt  = vec![0x23, 0xfe, 0xa0, 0x11, 0x89, 0x55, 0x10, 0x02];
    	let res = encode_rc5(32, 12, 16, key.clone(), &pt);
		let res = decode_rc5(32, 12, 16, key, &res);
    	assert!(&pt[..] == &res[..]);
    }

	#[test]
	fn encode_empty_message() {
		// https://asecuritysite.com/encryption/rc5
		let key = vec![0x00; 16];
    	let pt  = vec![0x00; 8];
    	let res = encode_rc5(32, 12, 16, key, &pt);
		let ct = vec![0xEE, 0xDB, 0xA5, 0x21, 0x6D, 0x8F, 0x4B, 0x15];
    	assert!(&ct[..] == &res[..]);
	}

	#[test]
	fn encode_ones_message() {
		// https://asecuritysite.com/encryption/rc5
		let key = vec![0x11; 16];
    	let pt  = vec![0x11; 8];
    	let res = encode_rc5(32, 12, 16, key, &pt);
		let ct = vec![0xF7, 0x0C, 0x1B, 0x3E, 0x99, 0xAB, 0x89, 0x11];
    	assert!(&ct[..] == &res[..]);
	}

    #[test]
    fn encode_a() {
    	let key = vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F];
    	let pt  = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];
    	// let ct  = vec![0x2D, 0xDC, 0x14, 0x9B, 0xCF, 0x08, 0x8B, 0x9E]; <-- sorry but I don't know where this came from.
		// I obtained the next from https://asecuritysite.com/encryption/rc5
		let ct  = vec![0x54, 0xA2, 0x92, 0xE1, 0x17, 0x4E, 0xC0, 0x44];
    	let res = encode_rc5(32, 12, 16, key, &pt);
    	assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn encode_b() {
    	let key = vec![0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48];
    	let pt  = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];
    	// let ct  = vec![0x11, 0xE4, 0x3B, 0x86, 0xD2, 0x31, 0xEA, 0x64]; <-- ???

		// https://asecuritysite.com/encryption/rc5
		let ct = vec![0x3D, 0x75, 0x71, 0xD3, 0xA1, 0x6B, 0x98, 0x09];
    	let res = encode_rc5(32, 12, 16, key, &pt);
    	assert!(&ct[..] == &res[..]);
    }

    #[test]
    fn decode_a() {
		// I changed the next items. The original code had:
    	// let pt  = vec![0x96, 0x95, 0x0D, 0xDA, 0x65, 0x4A, 0x3D, 0x62];
    	// let ct  = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];

    	let key = vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F];
    	let pt  = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77]; // The 'pt' value used in 'encode_a()'
    	let ct  = vec![0x54, 0xA2, 0x92, 0xE1, 0x17, 0x4E, 0xC0, 0x44]; // The 'ct' calculated in 'encode_a()' 
    	let res = decode_rc5(32, 12, 16, key, &ct);
    	assert!(&pt[..] == &res[..]);
    }

    #[test]
    fn decode_b() {
		// I changed the next items. The original code had:
		// let pt  = vec![0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66, 0x3F];
    	// let ct  = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];

    	let key = vec![0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48];
    	let pt  = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];
    	let ct  = vec![0x3D, 0x75, 0x71, 0xD3, 0xA1, 0x6B, 0x98, 0x09];
    	let res = decode_rc5(32, 12, 16, key, &ct);
    	assert!(&pt[..] == &res[..]);
    }
}

#[cfg(test)]
mod rc5_8_12_4_tests {
	use super::*;

	#[test]
    fn encode_a() {
    	let key = vec![0x00, 0x01, 0x02, 0x03];
    	let pt  = vec![0x00, 0x01];
		let ct  = vec![0x21, 0x2A];
    	let res = encode_rc5(8, 12, 4, key, &pt);
    	assert!(&ct[..] == &res[..]);
    }
}
